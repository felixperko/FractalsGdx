android {
    buildToolsVersion "30.0.2"
    compileSdkVersion 29
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
//        exclude 'ch.qos.logback'
        //exclude group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    }
    defaultConfig {
        applicationId "de.felixp.fractalsgdx"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.mygdx.game/com.mygdx.game.AndroidLauncher'
}

eclipse.project.name = appName + "-android"


//android {
////    buildToolsVersion "30.0.2"
//    compileSdkVersion 30
//    sourceSets {
//        main {
//            manifest.srcFile 'AndroidManifest.xml'
//            java.srcDirs = ['src']
//            aidl.srcDirs = ['src']
//            renderscript.srcDirs = ['src']
//            res.srcDirs = ['res']
//            assets.srcDirs = ['assets']
//            jniLibs.srcDirs = ['libs']
//        }
//
//    }
//    packagingOptions {
//        //exclude 'org/xerial/snappy/native/Windows/x86/snappyjava.dll'
//        //exclude 'org/xerial/snappy/native/Windows/x86_64/snappyjava.dll'
//        //exclude 'org/xerial/snappy/native/README'
//        //exclude 'org/xerial/snappy/VERSION'
//        //exclude 'org/xerial/snappy/native/Mac/x86/libsnappyjava.jnilib'
//        //exclude 'org/xerial/snappy/native/Mac/x86_64/libsnappyjava.jnilib'
//        //exclude 'org/xerial/snappy/native/AIX/ppc64/libsnappyjava.a'
//        //exclude 'org/xerial/snappy/native/AIX/ppc/libsnappyjava.a'
//        //exclude 'META-INF/robovm/ios/robovm.xml'
//        //exclude 'org.xerial.snappy:snappy-java:1.1.7.1'
//    }
//    defaultConfig {
//        applicationId "de.felixp.fractalsgdx"
//        minSdkVersion 26
//        targetSdkVersion 30
//        versionCode 1
//        versionName "1.0"
//    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }
//}
//
//
//// called every time gradle gets executed, takes the native dependencies of
//// the natives configuration, and extracts them to the proper libs/ folders
//// so they get packed with the APK.
//task copyAndroidNatives {
//    doFirst {
//        file("libs/armeabi/").mkdirs()
//        file("libs/armeabi-v7a/").mkdirs()
//        file("libs/arm64-v8a/").mkdirs()
//        file("libs/x86_64/").mkdirs()
//        file("libs/x86/").mkdirs()
//
//        configurations.natives.files.each { jar ->
//            def outputDir = null
//            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
//            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
//            if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
//            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
//            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
//            if(outputDir != null) {
//                copy {
//                    from zipTree(jar)
//                    into outputDir
//                    include "*.so"
//                }
//            }
//        }
//    }
//}
//
//tasks.whenTaskAdded { packageTask ->
//    if (packageTask.name.contains("package")) {
//        packageTask.dependsOn 'copyAndroidNatives'
//    }
//}
//
//task run(type: Exec) {
//    def path
//    def localProperties = project.file("../local.properties")
//    if (localProperties.exists()) {
//        Properties properties = new Properties()
//        localProperties.withInputStream { instr ->
//            properties.load(instr)
//        }
//        def sdkDir = properties.getProperty('sdk.dir')
//        if (sdkDir) {
//            path = sdkDir
//        } else {
//            path = "$System.env.ANDROID_HOME"
//        }
//    } else {
//        path = "$System.env.ANDROID_HOME"
//    }
//
//    def adb = path + "/platform-tools/adb"
//    commandLine "$adb", 'shell', 'am', 'start', '-n', 'de.felixp.fractalsgdx/de.felixp.fractalsgdx.AndroidLauncher'
//}
//
//// sets up the Android Eclipse project, using the old Ant based build.
//eclipse {
//    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
//    // ignores any nodes added in classpath.file.withXml
//    sourceSets {
//        main {
//            java.srcDirs "src", 'gen'
//        }
//    }
//
//    jdt {
//        sourceCompatibility = 8
//        targetCompatibility = 8
//    }
//
//    classpath {
////        plusConfigurations += [ project.configurations.compile ]
//        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
//    }
//
//    project {
//        name = appName + "-android"
//        natures 'com.android.ide.eclipse.adt.AndroidNature'
//        buildCommands.clear();
//        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
//        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
//        buildCommand "org.eclipse.jdt.core.javabuilder"
//        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
//    }
//}
//
//// sets up the Android Idea project, using the old Ant based build.
//idea {
//    module {
//        sourceDirs += file("src");
////        scopes = [ COMPILE: [plus:[project.configurations.compile]]]
//
//        iml {
//            withXml {
//                def node = it.asNode()
//                def builder = NodeBuilder.newInstance();
//                builder.current = node;
//                builder.component(name: "FacetManager") {
//                    facet(type: "android", name: "Android") {
//                        configuration {
//                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
//                        }
//                    }
//                }
//            }
//        }
//    }
//}