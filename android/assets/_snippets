float unpack_depth(const in vec4 rgba_depth)
{
    const vec4 bit_shift = vec4(1.0/(256.0*256.0), 1.0/(256.0), 1.0, 256.0);
    float depth = dot(rgba_depth, bit_shift);
    return depth;
}

float DecodeExpV4( in vec4 pack )
{
    int exponent = int( pack.w * 256.0 - 127.0 );
    float value  = dot( pack.xyz, 1.0 / vec3(1.0, 256.0, 256.0*256.0) );
    value        = value * (2.0*256.0*256.0*256.0) / (256.0*256.0*256.0 - 1.0) - 1.0;
    return value * exp2( float(exponent) );
}

float DecodeExpV3( in vec3 pack )
{
    int exponent = int( pack.z * 256.0 - 127.0 );
    float value  = dot( pack.xy, 1.0 / vec2(1.0, 256.0) );
    value        = value * (2.0*256.0*256.0) / (256.0*256.0 - 1.0) - 1.0;
    return value * exp2( float(exponent) );
}

float DecodeRangeV4( in vec4 pack, in float minVal, in float maxVal )
{
    float value  = dot( pack, 1.0 / vec4(1.0, 256.0, 256.0*256.0, 256.0*256.0*256.0) );
    value *= (256.0*256.0*256.0) / (256.0*256.0*256.0 - 1.0);
    return mix( minVal, maxVal, value );
}

vec3 hsv2rgb(vec3 c) {
   vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
   vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
   return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec4 EncodeExpV4( in float value ){
     int exponent  = int( log(  abs( value )  )/log(2.0) + 1.0 );
     value        /= exp2( float( exponent ) );
     value         = (value + 1.0) * (256.0*256.0*256.0 - 1.0) / (2.0*256.0*256.0*256.0);
     vec4 encode   = fract( value * vec4(1.0, 256.0, 256.0*256.0, 256.0*256.0*256.0) );
     return vec4( encode.xyz - encode.yzw / 256.0 + 1.0/512.0, (float(exponent) + 127.5) / 256.0 );
}

vec3 EncodeExpV3( in float value ){
     int exponent  = int( log( abs( value ) )/log(2.0) + 1.0 );
     value        /= exp2( float( exponent ) );
     value         = (value + 1.0) * (256.0*256.0 - 1.0) / (2.0*256.0*256.0);
     vec3 encode   = fract( value * vec3(1.0, 256.0, 256.0*256.0) );
     return vec3( encode.xy - encode.yz / 256.0 + 1.0/512.0, (float(exponent) + 127.5) / 256.0 );
}

vec4 EncodeRangeV4( in float value, in float minVal, in float maxVal) {
     value        = clamp( (value-minVal) / (maxVal-minVal), 0.0, 1.0 );
     value       *= (256.0*256.0*256.0 - 1.0) / (256.0*256.0*256.0);
     vec4 encode  = fract( value * vec4(1.0, 256.0, 256.0*256.0, 256.0*256.0*256.0) );
     return vec4( encode.xyz - encode.yzw / 256.0, encode.w ) + 1.0/512.0;
}

vec4 pack_depth(const in float depth){
    const vec4 bit_shift = vec4(256.0*256.0, 256.0, 1.0, 1.0/256.0);
    const vec4 bit_mask  = vec4(1.0/256.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);
    vec4 res = fract(depth * bit_shift);
    res -= res.xxyz * bit_mask;
    return res;
}